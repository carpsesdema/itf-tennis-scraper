[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "itf-tennis-scraper"
version = "2.0.0"
description = "Professional ITF Tennis Match Scraper with GUI"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Tennis Scraper Team", email = "contact@tennisscraper.com"}
]
maintainers = [
    {name = "Tennis Scraper Team", email = "contact@tennisscraper.com"}
]
keywords = ["tennis", "scraping", "ITF", "sports", "GUI"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Sports",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "PySide6>=6.5.0,<7.0.0",
    "requests>=2.28.0,<3.0.0",
    "beautifulsoup4>=4.11.0,<5.0.0",
    "selenium>=4.8.0,<5.0.0",
    "lxml>=4.9.0,<5.0.0",
    "aiohttp>=3.8.0,<4.0.0",
    "pandas>=1.5.0,<3.0.0",
    "asyncio-throttle>=1.0.0,<2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-qt>=4.2.0,<5.0.0",
    "black>=22.0.0,<24.0.0",
    "flake8>=4.0.0,<7.0.0",
    "mypy>=0.991,<2.0.0",
    "isort>=5.10.0,<6.0.0",
    "pre-commit>=2.20.0,<4.0.0",
]
docs = [
    "sphinx>=5.0.0,<8.0.0",
    "sphinx-rtd-theme>=1.2.0,<2.0.0",
]
build = [
    "pyinstaller>=5.7.0,<6.0.0",
]

[project.urls]
Homepage = "https://github.com/carpsesdema/itf-tennis-scraper"
Documentation = "https://github.com/carpsesdema/itf-tennis-scraper/wiki"
Repository = "https://github.com/carpsesdema/itf-tennis-scraper.git"
"Bug Tracker" = "https://github.com/carpsesdema/itf-tennis-scraper/issues"
Changelog = "https://github.com/carpsesdema/itf-tennis-scraper/blob/main/CHANGELOG.md"

[project.scripts]
tennis-scraper = "tennis_scraper.__main__:main"

[project.gui-scripts]
tennis-scraper-gui = "main:main"

[tool.setuptools]
packages = ["tennis_scraper"]

[tool.setuptools.package-data]
tennis_scraper = ["*.json", "*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "selenium.*",
    "bs4.*",
    "pandas.*",
    "PySide6.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gui: marks tests as GUI tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["tennis_scraper"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]